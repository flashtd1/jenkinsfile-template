pipeline {
    agent any 
    // 定义groovy脚本中使用的环境变量
    // environment{
    //   // 将构建任务中的构建参数转换为环境变量
    //   IMAGE_TAG =  sh(returnStdout: true,script: 'echo $image_tag').trim()
    //   ORIGIN_REPO =  sh(returnStdout: true,script: 'echo $origin_repo').trim()
    //   REPO =  sh(returnStdout: true,script: 'echo $repo').trim()
    //   BRANCH =  sh(returnStdout: true,script: 'echo $branch').trim()
    // }

    // // 定义本次构建使用哪个标签的构建环境，本示例中为 “slave-pipeline”
    // agent{
    //     node{
    //         label 'slave-pipeline'
    //     }
    // }

    stages {
        stage('Git') { 
            steps { 
                git branch:  params.branch, credentialsId: params.credId , url: params.GitUrl
            }
        }

        stage('写入配置') {
          steps {
            sh '''
              ''' + params.WriteFile + '''
            '''
          }
        }
        
        stage('构建镜像') { 
            steps {
               sh '''
                 docker build -t ${origin_repo}/${account}/${repo}:${image_tag} .
               '''
            }
        }

        
        stage('push镜像到阿里云') { 
            steps {
              sh '''
                docker login -u ${ali_account} -p ${ali_passwd} ${origin_repo}
                docker push  ${origin_repo}/${account}/${repo}:${image_tag}
              '''
            }
        }
        stage('停止旧容器') {
            steps {
                sh '''
                  last_cid=$(docker ps | grep ${repo}-${image_tag} | awk '{print $1}')
                  if [[ -n $last_cid ]]
                  then
                    docker stop $last_cid
                    docker rm $last_cid
                  fi
                '''
            }
        }
        
        stage('启动容器') { 
            steps {
              sh '''
                docker run -d -p ${out_ip}:${in_ip} --name ${repo}-${image_tag} ${origin_repo}/${account}/${repo}:${image_tag}
              '''
            }
        }

        stage('清理镜像 ') {
            steps {
                sh '''
                  docker system prune -f
                '''
            }
        }
        
    }
}